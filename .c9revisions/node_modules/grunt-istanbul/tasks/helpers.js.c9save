{"ts":1379343939424,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"exports.init = function(grunt) {\r\n  'use strict';\r\n\r\n  var fs = require('fs');\r\n  var path = require('path');\r\n\r\n  var flow = require('nue').flow;\r\n  var as = require('nue').as;\r\n\r\n  var istanbul = require('istanbul');\r\n\r\n  function flowEnd(err, done) {\r\n    if (err) {\r\n      grunt.fail.fatal(err);\r\n    } else {\r\n      grunt.log.ok();\r\n    }\r\n    done();\r\n  }\r\n\r\n  function makeReporters(options) {\r\n    var result = [];\r\n    var reporters = options.reporters &&\r\n      typeof options.reporters === 'object' ? options.reporters : {};\r\n    Object.keys(reporters).forEach(function(n) {\r\n      if(reporters[n]) {\r\n        result.push({ type : n, options : reporters[n] });\r\n      }\r\n    });\r\n\r\n    var append = function(t) {\r\n      if(t && !reporters[t]) {\r\n        result.push({ type : t, options : options});\r\n        reporters[t] = true;\r\n      }\r\n    };\r\n\r\n    append(options.type);\r\n\r\n    var mapping = {\r\n      'none' : [],\r\n      'detail': ['text'],\r\n      'both' : ['text', 'text-summary']\r\n    };\r\n    var a = mapping[options.print];\r\n    if(a) {\r\n      a.forEach(append);\r\n    } else {\r\n      append('text-summary');\r\n    }\r\n    return result;\r\n  }\r\n\r\n  return {\r\n    instrument : function(files, options, done) {\r\n      var outFile = function(file) {\r\n        return path.join(options.basePath, options.flatten === true ? path.basename(file) : file);\r\n      };\r\n\r\n      var instFlow = flow(function readFile(f) {\r\n          fs.readFile(f.name, 'utf8', this.async({\r\n            name : f.name,\r\n            code : as(1)\r\n          }));\r\n        }, function instrument(f) {\r\n          grunt.verbose.writeln('instrument from ' + f.name);\r\n          var instrumenter = new istanbul.Instrumenter(options);\r\n          instrumenter.instrument(f.code, f.name, this.async({\r\n            name : f.name,\r\n            code : as(1)\r\n          }));\r\n        }, function write(result) {\r\n          var out = outFile(result.name);\r\n          grunt.verbose.writeln('instrument to ' + out);\r\n          grunt.file.mkdir(path.dirname(out));\r\n          fs.writeFile(out, result.code, 'utf8', this.async(as(1)));\r\n        }, function end() {\r\n          flowEnd(this.err, this.next.bind(this));\r\n        });\r\n\r\n      var dateCheckFlow = flow(function checkDestExists(f) {\r\n          grunt.verbose.writeln('checking destination exists ' + f.name);\r\n          fs.exists(outFile(f.name), this.async({ name : f.name, exists : as(0) }));\r\n        },\r\n        function readStat(f) {\r\n          if (f.exists) {\r\n            grunt.verbose.writeln('reading stat for ' + f.name);\r\n            fs.stat(f.name, this.async({ name : f.name, stat : as(1) }));\r\n            fs.stat(outFile(f.name), this.async({ name : f.name, stat : as(1) }));\r\n          } else {\r\n            grunt.verbose.writeln('instrumented file does not exist ' + f.name);\r\n            this.end({ name : f.name, instrument : true });\r\n          }\r\n        }, function decision(i, o) {\r\n          var reinstrument = i.stat.mtime.getTime() > o.stat.mtime.getTime();\r\n          grunt.verbose.writeln('make a decision about instrumenting ' + i.name + ': ' + reinstrument);\r\n          this.end({ name: i.name, instrument: reinstrument });\r\n        }, function end(f) {\r\n          if (f.instrument) {\r\n            this.exec(instFlow, { name : f.name }, this.async());\r\n          } else {\r\n            flowEnd(this.err, this.next.bind(this));\r\n          }\r\n        });\r\n\r\n      flow(function(filelist) {\r\n        this.asyncEach(filelist, function(file, group) {\r\n          this.exec((options.lazy ? dateCheckFlow : instFlow), { name : file }, group.async(as(1)));\r\n        });\r\n      }, done)(files);\r\n    },\r\n    storeCoverage : function(coverage, options, done) {\r\n      flow(function write_json(cov) {\r\n        var json = path.resolve(options.dir, options.json);\r\n        grunt.file.mkdir(path.dirname(json));\r\n        fs.writeFile(json, JSON.stringify(cov), 'utf8', this.async(as(1)));\r\n      }, function() {\r\n        flowEnd(this.err, done);\r\n      })(coverage);\r\n    },\r\n    makeReport : function(files, options, done) {\r\n      flow(function(filelist) {\r\n        this.asyncEach(filelist, function(file, group) {\r\n          grunt.verbose.writeln('read from ' + file);\r\n          fs.readFile(file, 'utf8', group.async(as(1)));\r\n        });\r\n      }, function report(list) {\r\n        var collector = new istanbul.Collector();\r\n        list.forEach(function(json) {\r\n          collector.add(JSON.parse(json));\r\n        });\r\n        makeReporters(options).forEach(function(repoDef) {\r\n            var reporter = istanbul.Report.create(repoDef.type, repoDef.options);\r\n            reporter.writeReport(collector, true);\r\n        });\r\n        this.next();\r\n      }, function() {\r\n        flowEnd(this.err, done);\r\n      })(files);\r\n    }\r\n  };\r\n};\r\n"]],"start1":0,"start2":0,"length1":0,"length2":4786}]],"length":4786}
