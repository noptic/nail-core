{"ts":1379343920837,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n * grunt-istanbul\r\n * https://github.com/taichi/grunt-istanbul\r\n *\r\n * Copyright (c) 2012 taichi\r\n * Licensed under the MIT license.\r\n */\r\nmodule.exports = function(grunt) {\r\n  'use strict';\r\n\r\n  var helper = require('./helpers').init(grunt);\r\n  grunt\r\n      .registerTask('instrument', 'instruments a file or a directory tree',\r\n          function(target) {\r\n            var key = 'instrument.files';\r\n            this.requiresConfig(key);\r\n            var files = grunt.config(key);\r\n            var options = this.options({\r\n              basePath : 'build/instrument/',\r\n              flatten : false\r\n            });\r\n            grunt.verbose.writeflags(options, 'Options');\r\n            helper.instrument(grunt.file.expand(files), options, this\r\n                .async());\r\n          });\r\n\r\n  grunt.registerTask('reloadTasks', 'override instrumented tasks', function(\r\n      target) {\r\n    var key = 'reloadTasks.rootPath';\r\n    this.requiresConfig(key);\r\n    var path = grunt.config(key);\r\n    grunt.verbose.writeln('Tasks from ' + path);\r\n    grunt.loadTasks(path);\r\n    grunt.log.ok();\r\n  });\r\n\r\n  grunt.registerTask('storeCoverage', 'store coverage from global', function(\r\n      target) {\r\n    var options = this.options({\r\n      dir : 'build/reports/',\r\n      json : 'coverage.json',\r\n      coverageVar : '__coverage__'\r\n    });\r\n    grunt.verbose.writeflags(options, 'Options');\r\n    if (global[options.coverageVar]) {\r\n      helper.storeCoverage(global[options.coverageVar], options, this.async());\r\n    } else {\r\n      grunt.fail.fatal('No coverage information was collected');\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('makeReport', 'make coverage report', function(target) {\r\n    var key = 'makeReport.src';\r\n    this.requiresConfig(key);\r\n    var files = grunt.config(key);\r\n    var options = this.options({\r\n      reporters : {},\r\n      type : 'lcov',\r\n      dir : 'build/reports/',\r\n      print : 'none'\r\n    });\r\n    grunt.verbose.writeflags(options, 'Options');\r\n    helper.makeReport(grunt.file.expand(files), options, this.async());\r\n  });\r\n};\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2070}]],"length":2070}
