{"ts":1379274014981,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"[NailApi].modules\n===============\n\nDefinitions\n-----------\n\n    should  = require 'should'\n    nail    = require '../coverage/instrument/lib/module.js'\n    _       = require 'underscore'\n    they    = it #more natural language for describing array properties\n\nDescription\n-----------\n\n    describe 'NailApi.modules', ->\n      it 'is an array', ->\n        _.isArray(nail.modules).should.be.ok\n\n      it 'is empty by default', ->\n        nail.modules.length.should.equal 0\n\n      they 'augment the created class', ->\n        flagsModule =\n          augment: (newClass) ->\n            flags = newClass.definition.flags ? {}\n            for name,value of flags\n              newClass::[name] = !!value\n\n        myNail = nail.use flagsModule\n\n        lib = myNail.to MyClass:\n          flags:\n            empty:    false\n            useable:  0\n            positive: true\n            even:     'yes'\n\n        instance = new lib.MyClass()\n        instance.empty.should.equal false\n        instance.useable.should.equal false\n        instance.positive.should.equal true\n        instance.even.should.equal true\n\n      they 'are called in the same order as in the array', ->\n        calls = []\n        module1 = augment: -> calls.push 'module1 calling'\n        module2 = augment: -> calls.push 'module2 calling'\n        myNail = nail.use()\n        myNail.modules = [module1, module2]\n        myNail.to myclass: {}\n        calls[0].should.equal 'module1 calling'\n        calls[1].should.equal 'module2 calling'"]],"start1":0,"start2":0,"length1":0,"length2":1500}]],"length":1500}
