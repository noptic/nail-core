{"ts":1379274200072,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = (grunt) ->\n  fs = require 'fs'\n  configuration = grunt.file.readJSON('build.json')\n  #each component requires a .coffe file in src and a coffe.md file in spec\n  components  = configuration.build?.components ?[]\n  #non component source files\n  sourceFiles = configuration.build?.sourceFiles ?[]\n\n  for component in components\n    sourceFiles.push \"src/#{component}.coffee\"\n\n  if fs.existsSync('src/head.coffee')\n    sourceFiles.unshift('src/head.coffee')\n\n  if fs.existsSync('src/foot.coffee')\n    sourceFiles.push('src/foot.coffee')\n\n  tests = \"#{configuration.path.tests}/**/*.js\"\n  tasks = \"lib/**/*.js\"\n\n  grunt.initConfig\n    pkg: grunt.file.readJSON('package.json')\n\n    coffee:\n      options:\n        bare: true\n      compile:\n        files:\n          \"lib/module.js\": sourceFiles\n      specs:\n        expand: true\n        cwd: configuration.path.specs\n        src: ['*.coffee.md','*.coffee','*.litcoffee']\n        dest: configuration.path.tests\n        ext: '.js'\n\n    simplemocha:\n      options:\n        globals: ['should']\n        timeout: 3000\n        ignoreLeaks: false\n        ui: 'bdd'\n        reporter: 'spec'\n      all:\n        src: tests\n\n    instrument:\n      files: tasks\n      options:\n        lazy: false\n        basePath: \"#{configuration.path.coverage}/instrument/\"\n\n    storeCoverage:\n      options:\n        dir: configuration.path.coverage\n\n    reloadTasks:\n      rootPath: \"#{configuration.path.coverage}/instrument/lib\"\n\n    makeReport:\n      src: \"#{configuration.path.coverage}/**/*.json\"\n      options:\n        type: \"lcov\"\n        dir: configuration.path.docs\n        print: \"detail\"\n\n\n    coverage:\n      options:\n        thresholds:\n          'statements': configuration.coverage.statements\n          'branches':   configuration.coverage.branches\n          'lines':      configuration.coverage.lines\n          'functions':  configuration.coverage.functions\n        dir: 'coverage/reports',\n        root: '.'\n\n\n  grunt.loadNpmTasks 'grunt-contrib-coffee'\n  grunt.loadNpmTasks 'grunt-simple-mocha'\n  grunt.loadNpmTasks 'grunt-istanbul-coverage'\n  grunt.loadNpmTasks 'grunt-istanbul'\n\n  grunt.registerTask 'test', ['coffee','simplemocha']\n\n  grunt.registerTask 'default', [\n    'docs'\n    'validate'\n    'coffee'\n    'coverageReport'\n    'coverage'\n  ]\n\n  grunt.registerTask 'coverageReport', [\n    'coffee'\n    'instrument'\n    'reloadTasks'\n    'simplemocha'\n    'storeCoverage'\n    'makeReport'\n  ]\n\n  grunt.registerTask 'validate', ->\n    fs = require 'fs'\n    for component in components\n      if ! fs.existsSync(\"#{configuration.path.specs}/#{component}.coffee.md\")\n        grunt.warn \"Missing spec for component #{component}\"\n\n  grunt.registerTask 'docs', ->\n    fs = require 'fs'\n    _ = require 'underscore'\n    packageInfo = grunt.file.readJSON('package.json')\n    #links from configuration\n    related = configuration.see\n\n    #links from moules\n    for module in fs.readdirSync('./node_modules')\n      infoPath = \"./node_modules/#{module}/package.json\"\n      if fs.existsSync(infoPath)\n        moduleInfo = grunt.file.readJSON(infoPath)\n        #usemodules homepageif it is set\n        if moduleInfo.homepage\n          related[module] = moduleInfo.homepage\n        #or fallback to the npm page\n        else\n          related[module] =\"https://npmjs.org/package/#{module}\"\n\n    about = fs.readFileSync('about.md').toString().trim()\n\n    #Documentation\n    about += \"\\n\\nDocumentation\\n-------------\"\n    componentTree = {}\n    for component in components\n      node = componentTree\n      for part in component.split('.')\n        if _.isUndefined node.children\n          node.children = {}\n        if _.isUndefined node.children[part]\n          node.children[part] = {}\n        node = node.children[part]\n      node.link = component\n\n    printTree = (currentNode,indent,callback) ->\n      for name in _.keys(currentNode.children).sort()\n        value = currentNode.children[name]\n        if value.link\n          about += \"\\n#{indent}- [#{name}][#{value.link}]\"\n        else\n          about += \"\\n[indent- #{name}\"\n        if value.children\n          callback(value,'    '+indent,callback)\n\n    printTree(componentTree,'',printTree)\n    about += \"\\n\"\n\n    #Dependencies\n    about += \"\\n\\nDependencies\\n------------\"\n    for name,version of packageInfo.dependencies\n      if related[name]\n        about += \"\\n - [#{name}] #{version}\"\n      else\n        about += \"\\n - #{name} #{version}\"\n    about += \"\\n\"\n\n    #Dev-Devendencies\n    about += \"\\n\\nDev-Dependencies\\n----------------\"\n    for name,version of packageInfo.devDependencies\n      if related[name]\n        about += \"\\n - [#{name}] #{version}\"\n      else\n        about += \"\\n - #{name} #{version}\"\n    about += \"\\n\"\n\n    externalLinks = ''\n    for name,link of related\n      externalLinks += \"\\n[#{name}]: #{link}\"\n    externalLinks +=\"\\n\\n\"\n\n    #write README.md\n    for component in components\n      about = \"[#{component}]: ./#{configuration.path.docs}/#{component}.coffee.md\\n\"+about\n    fs.writeFileSync('README.md',externalLinks+about)\n\n    #other docs\n    internalLinks = \"\"\n    for component in components\n      internalLinks += \"[#{component}]: ./#{component}.coffee.md\\n\"\n    for component in components\n      spec = fs.readFileSync(\n        \"./#{configuration.path.specs}/#{component}.coffee.md\"\n      ).toString().trim()\n\n      fs.writeFileSync(\n        \"./#{configuration.path.docs}/#{component}.coffee.md\"\n        [externalLinks,internalLinks,spec].join \"\\n\"\n      )\n"]],"start1":0,"start2":0,"length1":0,"length2":5494}]],"length":5494}
{"contributors":[],"silentsave":false,"ts":1379312318289,"patch":[[{"diffs":[[0,"ADME.md\n"],[1,"    docs = []\n    docPattern = new RegExp('.coffee.md$')\n    for file in fs.readdir(configuration.path.docs)\n      if\n"],[0,"    for "]],"start1":4869,"start2":4869,"length1":16,"length2":134}]],"length":5612,"saved":false}
{"ts":1379312645050,"patch":[[{"diffs":[[0,"cs = []\n"],[1,"    docExtension = '.coffee.md'\n"],[0,"    docP"]],"start1":4883,"start2":4883,"length1":16,"length2":48},{"diffs":[[0," RegExp("],[-1,"'.coffee.md"],[1,"\"{docExtension}"],[0,"$')\n    "]],"start1":4943,"start2":4943,"length1":27,"length2":31},{"diffs":[[0,"      if"],[1," docPattern.exec(file)\n        docs.push path.basename(file)"],[0,"\n    for"]],"start1":5022,"start2":5022,"length1":16,"length2":76}]],"length":5708,"saved":false}
{"ts":1379312666789,"patch":[[{"diffs":[[0,"asename(file"],[1,",docExtension"],[0,")\n    for co"]],"start1":5077,"start2":5077,"length1":24,"length2":37}]],"length":5721,"saved":false}
{"ts":1379312696523,"patch":[[{"diffs":[[0,"    for "],[-1,"component in component"],[1,"doc in doc"],[0,"s\n      "]],"start1":5104,"start2":5104,"length1":38,"length2":26}]],"length":5709,"saved":false}
{"ts":1379312759011,"patch":[[{"diffs":[[0,"ension)\n"],[1,"    \n"],[0,"    for "]],"start1":5096,"start2":5096,"length1":16,"length2":21},{"diffs":[[0,"\"+about\n"],[1,"    \n"],[0,"    fs.w"]],"start1":5213,"start2":5213,"length1":16,"length2":21}]],"length":5719,"saved":false}
{"ts":1379312776136,"patch":[[{"diffs":[[0,"ension}$"],[-1,"'"],[1,"\""],[0,")\n    fo"]],"start1":4959,"start2":4959,"length1":17,"length2":17}]],"length":5719,"saved":false}
{"ts":1379312837382,"patch":[[{"diffs":[[0,"ath.docs}/#{"],[-1,"component"],[1,"doc"],[0,"}.coffee.md\\"]],"start1":5179,"start2":5179,"length1":33,"length2":27}]],"length":5713,"saved":false}
{"ts":1379312964686,"patch":[[{"diffs":[[0,"on.path."],[-1,"do"],[1,"spe"],[0,"cs)\n    "]],"start1":5008,"start2":5008,"length1":18,"length2":19}]],"length":5714,"saved":false}
{"ts":1379313193856,"patch":[[{"diffs":[[0,"    "],[-1,"docs = []\n    docExtension = '.coffee.md'\n    docPattern = new RegExp(\"{docExtension}$\")\n    for file in fs.readdir(configuration.path.specs)\n      if docPattern.exec(file)\n        docs.push path.basename(file,docExtension)\n    \n    for doc in doc"],[1,"for component in component"],[0,"s\n  "]],"start1":4877,"start2":4877,"length1":255,"length2":34},{"diffs":[[0,"docs}/#{"],[-1,"doc"],[1,"component"],[0,"}.coffee"]],"start1":4963,"start2":4963,"length1":19,"length2":25},{"diffs":[[0,"out\n"],[-1,"    \n"],[0,"    "]],"start1":4997,"start2":4997,"length1":13,"length2":8}]],"length":5494,"saved":false}
{"ts":1379313245335,"patch":[[{"diffs":[[0,"equire 'fs'\n"],[1,"    path = require 'path'\n"],[0,"    _ = requ"]],"start1":2722,"start2":2722,"length1":24,"length2":50}]],"length":5520,"saved":false}
